!function(){"use strict";var n={208:function(n,e,t){var r=t(354),a=t.n(r),o=t(314),i=t.n(o)()(a());i.push([n.id,"html,\nbody {\n  height: 100vh;\n  margin: 0;\n  padding: 0;\n  display: grid;\n  grid-template-rows: auto 1fr auto;\n  font-family: Arial, sans-serif;\n}\n\n.grid {\n  display: grid;\n}\n\n.gameBoards {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 25px;\n  padding: 10px;\n  justify-items: center;\n}\n\n#gameboard1 {\n  display: grid;\n  grid-template-rows: repeat(10, 1fr);\n  grid-template-columns: repeat(10, 1fr);\n  width: 100%;\n  aspect-ratio: 1 / 1;\n  border: 3px solid black;\n}\n\n#gameboard2 {\n  display: grid;\n  grid-template-rows: repeat(10, 1fr);\n  grid-template-columns: repeat(10, 1fr);\n  width: 100%;\n  aspect-ratio: 1 / 1;\n  border: 3px solid black;\n}\n\n.gameBoardContainer {\n  width: 80%;\n  aspect-ratio: 1 / 1;\n}\n\n#messages {\n  font-size: 1.5rem;\n  padding: 0.5rem;\n  text-align: center;\n  background-color: #f8f8f8; /* Light background for the message area */\n}\n\nheader,\nfooter {\n  padding: 1rem;\n  text-align: center;\n  background-color: #004466;\n  color: white;\n}\nbutton {\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  margin-top: 10px;\n}\n\n@keyframes fillCell {\n  from { background: #fff; }\n  to { background: var(--fill-color, #ffffff); }\n}\n\n.gameboardCell {\n  border: 1px solid #ddd;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #fff;\n  animation: fillCell 0.8s forwards; /* Use the animation */\n}\n\n.green {\n  --fill-color: #4caf50;\n}\n\n.miss {\n  --fill-color: #ffeb3b;\n}\n\n.hit {\n  --fill-color: #d32f2f;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;;EAEE,aAAa;EACb,SAAS;EACT,UAAU;EACV,aAAa;EACb,iCAAiC;EACjC,8BAA8B;AAChC;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;EACb,qCAAqC;EACrC,SAAS;EACT,aAAa;EACb,qBAAqB;AACvB;;AAEA;EACE,aAAa;EACb,mCAAmC;EACnC,sCAAsC;EACtC,WAAW;EACX,mBAAmB;EACnB,uBAAuB;AACzB;;AAEA;EACE,aAAa;EACb,mCAAmC;EACnC,sCAAsC;EACtC,WAAW;EACX,mBAAmB;EACnB,uBAAuB;AACzB;;AAEA;EACE,UAAU;EACV,mBAAmB;AACrB;;AAEA;EACE,iBAAiB;EACjB,eAAe;EACf,kBAAkB;EAClB,yBAAyB,EAAE,0CAA0C;AACvE;;AAEA;;EAEE,aAAa;EACb,kBAAkB;EAClB,yBAAyB;EACzB,YAAY;AACd;AACA;EACE,kBAAkB;EAClB,eAAe;EACf,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,OAAO,gBAAgB,EAAE;EACzB,KAAK,sCAAsC,EAAE;AAC/C;;AAEA;EACE,sBAAsB;EACtB,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,sBAAsB;EACtB,iCAAiC,EAAE,sBAAsB;AAC3D;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,qBAAqB;AACvB",sourcesContent:["html,\nbody {\n  height: 100vh;\n  margin: 0;\n  padding: 0;\n  display: grid;\n  grid-template-rows: auto 1fr auto;\n  font-family: Arial, sans-serif;\n}\n\n.grid {\n  display: grid;\n}\n\n.gameBoards {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 25px;\n  padding: 10px;\n  justify-items: center;\n}\n\n#gameboard1 {\n  display: grid;\n  grid-template-rows: repeat(10, 1fr);\n  grid-template-columns: repeat(10, 1fr);\n  width: 100%;\n  aspect-ratio: 1 / 1;\n  border: 3px solid black;\n}\n\n#gameboard2 {\n  display: grid;\n  grid-template-rows: repeat(10, 1fr);\n  grid-template-columns: repeat(10, 1fr);\n  width: 100%;\n  aspect-ratio: 1 / 1;\n  border: 3px solid black;\n}\n\n.gameBoardContainer {\n  width: 80%;\n  aspect-ratio: 1 / 1;\n}\n\n#messages {\n  font-size: 1.5rem;\n  padding: 0.5rem;\n  text-align: center;\n  background-color: #f8f8f8; /* Light background for the message area */\n}\n\nheader,\nfooter {\n  padding: 1rem;\n  text-align: center;\n  background-color: #004466;\n  color: white;\n}\nbutton {\n  padding: 10px 20px;\n  font-size: 1rem;\n  cursor: pointer;\n  margin-top: 10px;\n}\n\n@keyframes fillCell {\n  from { background: #fff; }\n  to { background: var(--fill-color, #ffffff); }\n}\n\n.gameboardCell {\n  border: 1px solid #ddd;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #fff;\n  animation: fillCell 0.8s forwards; /* Use the animation */\n}\n\n.green {\n  --fill-color: #4caf50;\n}\n\n.miss {\n  --fill-color: #ffeb3b;\n}\n\n.hit {\n  --fill-color: #d32f2f;\n}\n"],sourceRoot:""}]),e.A=i},314:function(n){n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,a,o){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(i[d]=!0)}for(var l=0;l<n.length;l++){var c=[].concat(n[l]);r&&i[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),e.push(c))}},e}},354:function(n){n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},72:function(n){var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var o={},i=[],s=0;s<n.length;s++){var d=n[s],l=r.base?d[0]+r.base:d[0],c=o[l]||0,A="".concat(l," ").concat(c);o[l]=c+1;var f=t(A),u={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==f)e[f].references++,e[f].updater(u);else{var m=a(u,r);r.byIndex=s,e.splice(s,0,{identifier:A,updater:m,references:1})}i.push(A)}return i}function a(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,a){var o=r(n=n||[],a=a||{});return function(n){n=n||[];for(var i=0;i<o.length;i++){var s=t(o[i]);e[s].references--}for(var d=r(n,a),l=0;l<o.length;l++){var c=t(o[l]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}o=d}}},659:function(n){var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},540:function(n){n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:function(n,e,t){n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},825:function(n){n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:function(n){n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var a=e[r];if(void 0!==a)return a.exports;var o=e[r]={id:r,exports:{}};return n[r](o,o.exports,t),o.exports}t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,{a:e}),e},t.d=function(n,e){for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.nc=void 0,function(){var n=t(72),e=t.n(n),r=t(825),a=t.n(r),o=t(659),i=t.n(o),s=t(56),d=t.n(s),l=t(540),c=t.n(l),A=t(113),f=t.n(A),u=t(208),m={};m.styleTagTransform=f(),m.setAttributes=d(),m.insert=i().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=c(),e()(u.A,m),u.A&&u.A.locals&&u.A.locals;class p{constructor(n,e){this.length=n,this.hits=0,this.name=e}getLength(){return this.length}getHits(){return this.hits}hit(){this.hits+=1}isSunk(){return this.hits>=this.length}}function g(n){const{gameboard:e}=n.gameboard,t=n.isComputer?"gameboard2":"gameboard1",r=document.getElementById(t);r.innerHTML="";for(let t=0;t<n.gameboard.rows;t+=1)for(let a=0;a<n.gameboard.columns;a+=1){const o=document.createElement("div");o.classList.add("gameboardCell"),o.setAttribute("data-index",`${t}-${a}`),e[t][a]instanceof p?n.isComputer||o.classList.add("green"):"miss"===e[t][a]?o.classList.add("miss"):"hit"===e[t][a]&&o.classList.add("hit"),r.appendChild(o)}}function h(n){document.getElementById("messages").innerHTML=n}class b{constructor(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:10,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:10;this.rows=n,this.columns=e,this.gameboard=this.createGameboard(),this.missedShots=[],this.ships=[new p(5,"Carrier"),new p(4,"Battleship"),new p(3,"Destroyer"),new p(3,"Submarine"),new p(2,"PatrolBoat")]}createGameboard(){const n=[];for(let e=0;e<this.rows;e+=1)n[e]=new Array(this.columns).fill(null);return n}getGameboard(){return this.gameboard}placeShip(n,e,t){let r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];if(!1===r){if(e>this.gameboard.length-1||t+n.length>this.gameboard.length-1||t<0||e<0)return!1}else if(e+n.length>this.gameboard.length-1||t>this.gameboard.length-1||t<0||e<0)return!1;if(!1===r){for(let r=0;r<n.length;r+=1)if(this.gameboard[e][t+r]instanceof p)return!1}else for(let r=0;r<n.length;r+=1)if(this.gameboard[e+r][t]instanceof p)return!1;if(r)for(let r=0;r<n.length;r+=1)this.gameboard[e+r][t]=n;else for(let r=0;r<n.length;r+=1)this.gameboard[e][t+r]=n;return!0}receiveAttack(n,e,t){if(this.gameboard[n][e]instanceof p){const r=this.gameboard[n][e];return r.hit(),h("Hit!"),r.isSunk()&&h(t.isComputer?`You have sunk the enemy ${r.name}!`:`Your ${r.name} has been sunk!`),this.gameboard[n][e]="hit",!0}return"hit"===this.gameboard[n][e]||"miss"===this.gameboard[n][e]?(h("That cell has already been fired at"),!1):(this.gameboard[n][e]="miss",h("Miss!"),!0)}allShipsSunk(){return this.ships.every((n=>n.isSunk()))}}class C{constructor(){let n=arguments.length>0&&void 0!==arguments[0]&&arguments[0];this.gameboard=new b,this.isComputer=n}}function E(n){return{row:Math.floor(Math.random()*n.gameboard.rows),column:Math.floor(Math.random()*n.gameboard.columns),vertical:Math.random()>.5}}function y(n,e){e.forEach((e=>{let t;do{t=E(n,e.type.length)}while(!n.gameboard.placeShip(e.type,t.row,t.column,t.vertical))}))}function v(n,e){document.getElementById("gameboard2").querySelectorAll(".gameboardCell").forEach((t=>{t.addEventListener("click",(t=>function(n,e,t){const r=n.target.getAttribute("data-index").split("-"),a=parseInt(r[0],10),o=parseInt(r[1],10);if(document.getElementById("placeShips").disabled=!0,t.gameboard.receiveAttack(a,o,t))return t.gameboard.allShipsSunk()?(h("Player Wins!"),void g(t)):(g(t),void setTimeout((()=>{if(function(n){let e=!1;for(;!e;){const t=Math.floor(Math.random()*n.gameboard.rows),r=Math.floor(Math.random()*n.gameboard.columns);e=n.gameboard.receiveAttack(t,r,n)}}(e),e.gameboard.allShipsSunk())return h("Computer Wins!"),void g(e);g(e),v(e,t)}),600))}(t,n,e)))}))}!function n(){const e=new C(!1),t=new C(!0);document.getElementById("placeShips").onclick=()=>{n()},function(n,e){y(n,[{type:n.gameboard.ships[0]},{type:n.gameboard.ships[1]},{type:n.gameboard.ships[2]},{type:n.gameboard.ships[3]},{type:n.gameboard.ships[4]}]),y(e,[{type:e.gameboard.ships[0]},{type:e.gameboard.ships[1]},{type:e.gameboard.ships[2]},{type:e.gameboard.ships[3]},{type:e.gameboard.ships[4]}]),g(n),g(e)}(e,t),v(e,t)}()}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,